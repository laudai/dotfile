#Author:laudai


#set -g prefix C-a
# to set options you can use the set-option command , which can shorten to set

set -g prefix ^a
#^a means C-a
# -g switch ,for "global"

unbind ^b
#Free the original Ctrl-b prefix keybinding

set -s escape-time 1
#setting the delay between prefix and command
#讓你在command與前綴間所留的時間，以免跟vim與其他程式等衝突

set -g base-index 1
#Set the base index for windows to 1 instead of 0

setw -g pane-base-index 1
#Set the base inidex for panes to 1 instead of 0
#set-window-option shorten setw

bind r source-file ~/.tmux.conf \; display "Config Reload!!"
#bind-key -n C-r source-file ~/.tmux.conf \; display "Config Reload from no prefix"
#bind-key -n ^r source-file ~/.tmux.conf \; display "Config Reload from no prefix"
#bind -n ^s   display "Config Reload from no prefix"
#u can use bind -n to no press prefix
#Test for no prefix

bind C-a send-prefix
#Ensure that we can send Ctrl-a to other app
#讓其他的程式也可以收到ctrl+a


bind | split-window -h
bind - split-window -v
#splitting panes with | and -

bind -r h select-pane -L
bind -r j select-pane -D
bind -r k select-pane -U
bind -r l select-pane -R
#use the -r flag is more efficient to me //laudai

bind -r C-h select-window -t :-
bind -r C-l select-window -t :+
#Quick window selection
#let you quick to next , previous window . equal prefix n ,p

bind -r H resize-pane -L 5
bind -r J resize-pane -D 5
bind -r K resize-pane -U 5
bind -r L resize-pane -R 5
#Pane resizing panes with Prefix H,J,K,L
#when you use bind -r , you can specify that you want the key to be repeatable 

#set -g repeat-time 1000
#set the repeat-time to 1 second so that multiple command can be entered 
#by -r option of bind-key.Bydefault is 500ms
#這個是要讓你設定如果不要前綴鍵的指令時，可以有多少的間隔時間讓你操作

bind -r Tab select-window -t :+
#Select the next pane using "Tab"

set -g mouse off
#mouse support -set to no if u want to use the mouse

#In terminal you can type $tput colors 
#to get numbers of colors supported by your terminal session.

set -g default-terminal "screen-256color"
#Set the default terminal mode to 256color mode
#default is 8 color


###	Custom mine tmux pane,window###


setw -g pane-border-style fg=colour238,bg=default
setw -g pane-active-border-style fg=magenta,bg=default
#colors for pane borders

#setw -g window-style fg=colur240,bg=colour235
#setw -g window-activate-style fg=white,bg=black
## active pane normal , other shaded out
#原作者是希望讓當下激活的亮的，其餘沒激活的顏色是暗的

set -g message-style fg=colour47,bold,bg=black
#Command / message line
#讓你輸入指令或者是顯示指令的地方的顏色

#fg =foreground ,bg=background
#default is fg=black , bg=green



###  Custom mine tmux Status Line's Content  ###


set -g status-interval 1 
#Update the status line every seconds
#mind that if u have shell command ,those will be executed once per interval
#so be careful not to load too many resource-intensive scripts.

set -g status-left " #[fg=colour160]#S | #[fg=colour209]視窗:#I #[fg=colour220]窗格:#P" 
set -g status-left-length 40
#Status line left side to show Session:WindowIndex:Pane

set -g status-right "#[fg=colour111]\"#H\" #[fg=colour82]%H:%M:%S #[fg=colour208]%m/%d %a"
#Status line right side to show "ldv" 14:49:39 09/17 Sun

set -g status-justify centre
#Center the window list in the status line


set -g status-style fg=white,bg=black
#set the status line's color
#這裡設定的是全部的預設值，如果其他設定值是default，那麼就會吃這裡的設定值

setw -g window-status-style fg=colour44,bg=default
#set the color of the window list
#設定 1 2 3 4 等等索引地方的顏色

setw -g window-status-current-style fg=green,bold,bg=magenta
#set colors for the active window
#設定當前激活的視窗索引的顏色與背景顏色

setw -g monitor-activity on 
setw -g window-status-activity-style fg=colour212,bg=default
#設定開啟監控視窗，設定被監控視窗的前景與後景顏色
set -g visual-activity on
#當被監控的視窗有新事件的時候，會在下方顯示
#enable activity alerts


### make my configuration with text and buffers   ###


setw -g mode-keys vi
#enable vi keys

bind p select-window -t :-
# this is the default p for next window

bind = choose-buffer
#bind = show-buffer
# my choose-buffer use = key and default also use = to choose-buffer
# default s is choose-session

bind Escape copy-mode
bind -t vi-copy "v" begin-selection
bind -t vi-copy "y" copy-selection
#unbind p
#bind p paste-buffer
#you can make configuration like this let tmux like vim familiar
#你可以讓你的設定像vi模式，可是並非全然相向，因此我自己還是使用原本的設定


bind -t vi-copy y copy-pipe "xclip -sel clip -i"
# in copy mode , select your text press y and then press Prefix Ctrl-c to
# get your text on the clipboard. You can speed up the process by binding the y key to 
# send the output to xclip directly 

bind C-c capture-pane \; display "capture pane to tmux buffers" 
#bind C-c run "tmux save-buffer -|xclip -i -sel clipboard"
#bind C-c run "$(tmux save-buffer -| xclip -i -sel clipboard)"
# copy the current buffer to the system clipboard
# bcz now i meet use xclip will crash and can't use tmux prefix , so i give up use save-buffer to clipboard
# 改天在解決這個問題 ，看起來這個不是我的問題而是軟體的問題，先將就用這個，但是如果直接使用終端機輸入的話就不會出錯了

bind C-v run "tmux set-buffer \"$(xclip -o -sel clipboard)\"; tmux paste-buffer" \; display "Copy clipboard to tmux session buffer"
# paste text from the system clipboard into a tmux session
# it just like you paste the text from clipboard to use ctrl+shift+v in terminal


####  make my Workflows and my shortcuts key  ###

bind _ split-window -v -c "#{pane_current_path}"
bind \ split-window -h -c "#{pane_current_path}"
# split pane and retain the current directory of existing pane

bind C new-window -c "#{pane_current_path}"
# bind C to new window and in current path

bind C-s set-window-option synchronize-panes \; display "set synchronize-panes on / off"
# shortcut for synchronize-panes toggle

#bind P pipe-pane -o "cat >>~/#W.log" \; display "Toggled logging to ~/#W.log"
# Log output to a text file on demand


